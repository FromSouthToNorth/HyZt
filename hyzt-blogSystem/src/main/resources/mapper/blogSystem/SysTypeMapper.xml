<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="vip.hyzt.blogSystem.mapper.SysTypeMapper">
    
    <resultMap type="SysType" id="SysTypeResult">
        <result property="typeId"       column="type_id"     />
        <result property="typeName"     column="type_name"   />
        <result property="parentId"     column="parent_id"   />
        <result property="ancestors"    column="ancestors"   />
        <result property="delFlag"      column="del_flag"    />
        <result property="createBy"     column="create_by"   />
        <result property="createTime"   column="create_time" />
        <result property="updateBy"     column="update_by"   />
        <result property="updateTime"   column="update_time" />
    </resultMap>

    <sql id="selectSysTypeVo">
        select type_id, type_name, parent_id, ancestors, del_flag, create_by, create_time, update_by, update_time from sys_type
    </sql>

    <select id="selectSysTypeList" parameterType="SysType" resultMap="SysTypeResult">
        <include refid="selectSysTypeVo"/>
        where del_flag = '0'
        <if test="typeName != null  and typeName != ''">
            and type_name like concat('%', #{typeName}, '%')
        </if>
    </select>
    
    <select id="selectSysTypeById" parameterType="Long" resultMap="SysTypeResult">
        <include refid="selectSysTypeVo"/>
        where type_id = #{typeId}
    </select>
        
    <insert id="insertSysType" parameterType="SysType" useGeneratedKeys="true" keyProperty="typeId">
        insert into sys_type (
            <if test="typeName != null and typeName != ''">type_name,</if>
            <if test="parentId != null and parentId != 0">parent_id,</if>
            <if test="ancestors != null and ancestors != ''">ancestors,</if>
            <if test="createBy != null">create_by,</if>
            create_time
        ) values (
            <if test="typeName != null and typeName != ''">#{typeName},</if>
            <if test="parentId != null and parentId != 0">#{parent_id},</if>
            <if test="ancestors != null and ancestors != ''">#{ancestors},</if>
            <if test="createBy != null">#{createBy},</if>
            sysdate()
        )
    </insert>

    <update id="updateSysType" parameterType="SysType">
        update sys_type
        <set>
            <if test="typeName != null and typeName != ''">type_name = #{typeName},</if>
            <if test="parentId != null and parentId != 0">parent_id = #{parentId},</if>
            <if test="ancestors != null and ancestors != ''">ancestors = #{ancestors},</if>
            <if test="updateBy != null">update_by = #{updateBy},</if>
            update_time = sysdate()
        </set>
        where type_id = #{typeId}
    </update>

    <delete id="deleteSysTypeById" parameterType="Long">
        update sys_type set del_flag = '2' where type_id = #{typeId}
    </delete>

    <delete id="deleteSysTypeByIds" parameterType="String">
        update sys_type set del_flag = '2' where type_id in
        <foreach item="typeId" collection="array" open="(" separator="," close=")">
            #{typeId}
        </foreach>
    </delete>

    <select id="checkTypeNameUnique" resultMap="SysTypeResult">
        select type_id, type_name, parent_id from type_name = #{typeName} and parent_id = #{parentId} limit 1
    </select>

    <select id="selectChildrenTypeById" parameterType="Long" resultMap="SysTypeResult">
        <include refid="selectSysTypeVo" />
        where find_in_set(#{typeId}, ancestors)
    </select>

    <select id="hasChildByTypeId" parameterType="Long" resultType="int">
        select count(1) from sys_type
        where del_flag = '0' and parent_id = #{typeId} limit 1
    </select>

    <select id="checkTypeExistBlog" parameterType="Long" resultType="int">
        select count(1) from sys_blog where type_id = #{typeId} and del_flag = '0'
    </select>

    <update id="updateTypeChildren" parameterType="java.util.List">
        update sys_type set ancestors =
        <foreach collection="types" item="item" index="index"
            separator=" " open="case type_id" close="end">
            where #{item.typeId} then #{item.ancestors}
        </foreach>
        where type_id in
        <foreach collection="types" item="item" index="index"
            separator="," open="(" close=")">
            #{item.typeId}
        </foreach>
    </update>

</mapper>